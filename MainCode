//Purpose of the code: To create a small "Traffic Jam" game that can be actually played
//Code written by Evan Hoflich
//Date: 27/10/2020

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//-----------Defined constants---------------//
#define NUM_ROWS 8
#define NUM_COLS 8

#define SPACE 0
#define WALL -1
#define EXIT -2


//Purpose of the function: To create a 2D array of numbers that correspond with symbol to form a road
//Inputs: The road 2D array, what side of the road the exit should be, how far down/across the exit should be
//Outputs: None (Modified the array)
void InitialiseRoad(int road[NUM_ROWS][NUM_COLS], char side, int pos)
{
    for (int i = 0; i < NUM_ROWS; i++) { //Running through every element inside of the 2D array
        for (int j = 0; j < NUM_COLS; j++) {
            if (i == 0 || i == NUM_ROWS - 1) { //If the row number is the first or last element in list it will be saved as a wall (The wall is defined as -1)
                road[i][j] = WALL;
            }
            else if (j == 0 || j == NUM_COLS - 1) {  //If the column number is the first or last element in the list it will be saved as a wall (The wall is defined as -1)
                road[i][j] = WALL;
            }
            else {
                road[i][j] = SPACE; //Everything else that is not saved as a wall will be saved as a space (The space is defined as 0)
            }
        }
    }

    if (side == 'N') {  //If the side defined by the function call statement is "N", then the program will save the exit in the 2D array (Defined as -2) at "position" right from (0,0)
        road[0][pos] = EXIT;
    }
    if (side == 'E') {  //If the side defined by the function call statement is "E", then the program will save the exit in the 2D array (Defined as -2) at "position" down from (0,number of columns - 1)
        road[pos][NUM_COLS - 1] = EXIT;
    }
    if (side == 'S') {  //If the side defined by the function call statement is "S", then the program will save the exit in the 2D array (Defined as -2) at "position" right from (number of rows - 1,0)
        road[NUM_ROWS - 1][pos] = EXIT;
    }
    if (side == 'W') { //If the side defined by the function call statement is "W", then the program will save the exit in the 2D array (Defined as -2) at "position" down from (number of rows - 0,0)
        road[pos][0] = EXIT;
    }

}

//Purpose of the function: Convert the 2d array into a road by printing symbols
//Inputs: The road 2d array
//Outputs: None (Just prints the road)
void PrintRoad(int road[NUM_ROWS][NUM_COLS])
{   //Array of possible names for cars (used in assending order)
    char alphabet[29] = { ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };

    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {//Running through every element inside of the 2D array
            if (road[i][j] == -1) {  //Every wall (defined as -1) will be printed as a #
                printf("#");
            }
            else if (road[i][j] == 0) {  //Every space (represented by a 0) will be printed as a " "
                printf(" ");
            }
            else if (road[i][j] == -2) { //Every exit (represented by a -2) will be printed as a O
                printf("O");
            }  //If an element inside the road array is greater than 0 (the addcar function allocated 2 for A, 3 for B, 4 for C... etc) then it is matched with its corresponding letter in the alphabet array
            else if (road[i][j] > 0) {
                printf("%c", alphabet[road[i][j]]);
            }
        }
        printf("\n");
    }
}


//Purpose of the function: Find what percent of the road is being taken up by cars
//Inputs: The road 2d array
//Outputs: A percent of cars on the road

double PercentUsed(int road[NUM_ROWS][NUM_COLS])
{
    //Variable declaration
    int count = 0;
    double percent;
    double total = (NUM_ROWS - 2) * (NUM_COLS - 2); //Number of free spaces at the start

    //Loop that runs through the whole array and counts how many free spaces there are and detucts that from the number of free spaces there were at the start
    for (int i = 1; i < NUM_ROWS - 1; i++) {
        for (int j = 1; j < NUM_COLS - 1; j++) {
            if (road[i][j] == 0) {
                count++;
            }
        }
    }
    return percent = 100 - ((count / total) * 100); //Prints the percent of free space
}


//Purpose of the function: Adds a car with a perticular orientation and length represented by a letter of the alphabet to the road
//Inputs: The road 2d array, what row the car should be placed in, what column the car should be placed in, the size and orientation of the car (negative is vertical and positive is horizontal)
//Outputs: None (Modifies the road function)
void AddCar(int road[NUM_ROWS][NUM_COLS], int row, int col, int size)
{
    //Declaring variables
    int currentCarCount = 1;
    int onoff = 1;
    int touchingEdge = 0;
    int touchingCar = 0;
    int positiveSize = 0;

    //The function that prints the cars needs a positive size value to repeat that amount of times but
    //I cannot modify the size variable because the if statement after checks its sign (+ve or -ve)
    if (size < 0) {
        positiveSize = size * -1;
    }
    else {
        positiveSize = size;
    }


    //Check if a car is touching the wall {
    for (int x = 0; x < positiveSize; x++) { //Runs the loop through the size of the car
        if (size >= 2) { //If the size is positive it is horizontal
            if (road[row][col + x] == WALL) { //If the first index of the car is extended in the x direction by the size and it touches the wall, the varibale will change from a 0 to a 1
                touchingEdge = 1;
            }
        }
        if (size <= -2) {  //If the size is negative it is vertical
            if (road[row + x][col] == WALL) {  //If the first index of the car is extended in the y direction by the size and it touches the wall, the varibale will change from a 0 to a 1
                touchingEdge = 1;
            }
        }
    }

    //Check if a car is touching another car
    for (int x = 0; x < positiveSize; x++) { //Runs the loop through the size of the car
        if (size >= 2) {  //If the size is positive it is horizontal
            if (road[row][col + x] != 0) {  //If the first index of the car is extended in the x direction by the size and it touches another car, the varibale will change from a 0 to a 1
                touchingCar = 1;
            }
        }
        else if (size <= -2) {  //If the size is negative it is vertical
            if (road[row + x][col] != 0) {  //If the first index of the car is extended in the y direction by the size and it touches another car, the varibale will change from a 0 to a 1
                touchingCar = 1;
            }
        }
    }

    //Counting how many cars are currently on the road
    for (int k = 1; k < 26; k++) {
        for (int i = 1; i < NUM_ROWS - 1; i++) {
            for (int j = 1; j < NUM_COLS - 1; j++) {  //Runs through every value in the road array
                if ((road[i][j] == k) && (onoff == 1)) {  //If an element inside the array is a letter it will count that as a car
                    currentCarCount++;
                    onoff = 0;  //Variable gets reset to 0 so that it doesn't repeat the loop again
                }
            }
        }
        onoff = 1;  //Variable gets reset to 1 so that the loop can be run again for the next car
    }

    //Places a car overtop the throwaway value if the car doesn't touch the egde or another car
    if (touchingCar == 0 && touchingEdge == 0) {
        road[row][col] = currentCarCount;
    }


    //Places a car on the road with a letter according to how many cars are on the road
    if (touchingCar == 0 && touchingEdge == 0) {  //If the car is not touching the edge or another car
        for (int a = 1; a < positiveSize; a++) {  //The code will repeat for the length of the car
            if (size >= 2) {  //If the size is positive, the car will be horizontal
                road[row][col + a] = currentCarCount;  //Place a number that represents a letter on the road
            }
            else if (size <= -2) {  //If the size is negative, the car will be nagative
                road[row + a][col] = currentCarCount;  //Place a number that represents a letter on the road
            }
        }
    }

    currentCarCount = 0; //Resets the amount of cars on the road


}


//Purpose of the function: Find a specified car on the road and return its respective coordinates
//Inputs: The 2D road array, what row the uppermost part of the car is in, what column the leftmost position of the car is in,
//What  row the lowermost part of the car is in, what column the rightmost part of the car is in
//Outputs: The row and column of the uppermost/leftmost part of the car is in, the row and column of the lowermost/rightmost part of the car is in
void FindCar(int road[NUM_ROWS][NUM_COLS], char move, int* rowStart, int* colStart, int* rowEnd, int* colEnd)
{
    //Arrays to store all the positions of the rows and columns
    int posRow[100] = { 0 };
    int posCol[100] = { 0 };

    //Defining constants
    int count = 0;


    for (int i = 1; i < NUM_ROWS - 1; i++) {
        for (int j = 1; j < NUM_COLS - 1; j++) {  //Running through every element inside of the 2D array
            if (road[i][j] == move - 64) {  //If the loop finds a car represented by a letter (I have to -63 because my letters representations are 63 less than the ascii table eg. My A - 2, Ascii A - 65)
                posRow[count] = i;  //Adds the position of the row to an array
                posCol[count] = j;  //Adds the position of the column to an array
                count++;
            }
        }
    }


    *rowStart = posRow[0];  //Print out the first element in the array which is the uppermost position of the car
    *rowEnd = posRow[count - 1];  //Prints out the last element in the array which is the lowermost position of the car
    *colStart = posCol[0];  //Prints out the first element in the array which is the leftmost position of the car
    *colEnd = posCol[count - 1];  //Prints out the last element in the array which is the rightmost position of the cars
}

//Purpose of the function: To move a specified car. If the car is orientated vertically the program will attempt to move the car as far as possible up without
// touching another car/wall.If that is not possible it will move the car down as far as possible without touching another car/wall. If the car is orientated
// horizontally the program will attempt to move the car as left as possible without touching another car or wall. If that is not possible it will move the car down as
// far as possible without touching another car/wall
// Inputs: The road 2D array, the uppermost row of the first part of the car, the leftmost column of the first part of the car, the lowermost row of the last part of the car,
// the rightmost column of the last part of the car
// Outputs: Two coordinates: The coordinates of the leftmost/uppermost part of the car, the coordinates of the rightmost/lowermost part of the car
int MoveCar(int road[NUM_ROWS][NUM_COLS], int r0, int c0, int r1, int c1)
{
    int a = road[r0][c0];
    int  i = 1;
    if (c0 == c1) {  //If the car is aligned vertically
        if (road[r0 - 1][c0] == 0) {  //If there is a free space (represented by a 0), above the car
            while (road[r0 - i][c0] == 0) {  //Repeats the loop while there is a free space (represented by a 0), above the car
                road[r0 - i][c0] = road[r1 - i + 1][c0]; //Sets the uppermost position of car to the lowermost position of the car
                road[r1 - i + 1][c0] = 0;  //Sets the lowermost position of the car to a 0 (0 represents a space)
                i++;
            }
            if (road[1][c0] == a && road[0][c0] == -2) {  //If the car reaches the exit, the program returns a 1
                return 1;
            }
        }
        else if (road[r1 + 1][c0] == 0) { //If there is a free space (represnted by a 0), below the car
            while (road[r1 + i][c0] == 0) {  //Repeats the loop while there is a free space (represented by a 0), below the car
                road[r1 + i][c0] = road[r0 + i - 1][c0]; //Sets the lowermost position of car to the uppermost position of the car
                road[r0 + i - 1][c0] = 0; //Sets the uppermost position of the car to a 0 (0 represents a space)
                i++;
            }
            if (road[NUM_ROWS - 2][c0] == a && road[NUM_ROWS - 1][c0] == -2) {  //If the car reaches the exit, the program returns a 1
                return 1;
            }
        }
    }
    int k = 1;
    if (r0 == r1) {  //If the car is aligned horizontally
        if (road[r0][c0 - 1] == 0) { //If there a free space (represented by a 0) to the left of the car
            while (road[r0][c0 - k] == 0) {  //Repeats the loop while there is a free space (represented by a 0), to the left of the car
                road[r0][c0 - k] = road[r0][c1 - k + 1];  //Sets the leftmost position of the car to the rightmost position of the car
                road[r0][c1 - k + 1] = 0;  //Sets the rightmost position of the car to a 0 (0 represents a space)
                k++;
            }
            if (road[r0][1] == a && road[r0][0] == -2) {  //If the car reaches the exit, the program will return a 1
                return 1;
            }
        }
        else if (road[r0][c1 + 1] == 0) {  //If there is a free space (represented by a 0) to the right of the car
            while (road[r0][c1 + k] == 0) {  //Repeats the loop while there is a free space (represented by a 0) to the right of the car
                road[r0][c1 + k] = road[r0][c0 + k - 1];  //Sets the rightmost position of the car to the leftmost position of the car
                road[r0][c0 + k - 1] = 0;  //Sets the leftmost position of the car to a 0 (0 represents a space)
                k++;
            }
            if (road[r0][NUM_COLS - 2] == a && road[r0][NUM_COLS - 1] == -2) {  //If the car reaches the exit, the program will return a 1
                return 1;
            }
        }
    }
    return 0;
}


/* Function to obtain capital letter as input */
char GetMove(void)
{
    char move;
    printf("\nMove car: ");
    scanf("%c", &move);
    // Ignore non-capital letter inputs
    while ((move < 'A') || (move > 'Z')) {
        scanf("%c", &move);
    }
    return move;
}

/* The main Traffic Jam simulation */
int main(void)
{
    int gameOver = 0;
    int road[NUM_ROWS][NUM_COLS];
    int rowStart, colStart, rowEnd, colEnd;
    char input;

    /* Print banner */
    printf(" _____           __  __ _            _                                        \n");
    printf("|_   _| __ __ _ / _|/ _(_) ___      | | __ _ _ __ ___           ____          \n");
    printf("  | || '__/ _` | |_| |_| |/ __|  _  | |/ _` | '_ ` _ \\  --   __/  |_\\_      \n");
    printf("  | || | | (_| |  _|  _| | (__  | |_| | (_| | | | | | | --- |  _     _``-.    \n");
    printf("  |_||_|  \\__,_|_| |_| |_|\\___|  \\___/ \\__,_|_| |_| |_| --  '-(_)---(_)--'\n\n");

    /* Initialise the road and add cars */
    InitialiseRoad(road, 'E', 3);
    AddCar(road, 3, 3, 2);
    AddCar(road, 1, 1, 2);
    AddCar(road, 2, 1, 3);
    AddCar(road, 3, 2, -2);
    AddCar(road, 5, 2, -2);
    AddCar(road, 4, 4, -2);
    AddCar(road, 6, 3, 3);
    AddCar(road, 1, 5, -3);
    AddCar(road, 2, 6, -2);

    /* Print status */
    printf("ENGGEN131 2020 - C Project\nTraffic Jam!  There is a lot of traffic on the road!\n");
    printf("In fact, %.2f%% of the road is cars!\n\n", PercentUsed(road));

    /* Main simulation loop */
    while (!gameOver) {
        PrintRoad(road);
        input = GetMove();
        FindCar(road, input, &rowStart, &colStart, &rowEnd, &colEnd);
        gameOver = MoveCar(road, rowStart, colStart, rowEnd, colEnd);
    }

    /* A car has exited - the simulation is over */
    PrintRoad(road);
    printf("\nCongratulations, you're on your way again!");

    return 0;
}
